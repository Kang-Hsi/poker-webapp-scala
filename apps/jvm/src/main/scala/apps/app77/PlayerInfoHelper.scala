package apps.app77

import cs214.webapp.*

/* Useful methods for easy manipulation of PlayerInfo type. */
extension (p: PlayerInfo)


/* Documentation generated by AI, then double checked. */

  /** Updates the player's user id.
    *
    * @param id
    *   the new user id.
    * @return
    *   player with the updated user id.
    */
  def withId(id: UserId) =
    (id, p._2, p._3, p._4, p._5, p._6, p._7, p._8)

  /** Updates the player's money.
    *
    * @param money
    *   the new money value.
    * @return
    *   player with the updated money value.
    */
  def withMoney(money: Money) =
    (p._1, money, p._3, p._4, p._5, p._6, p._7, p._8)

  /** Updates the player's role.
    *
    * @param role
    *   the new role.
    * @return
    *   player with the updated role.
    */
  def withRole(role: Role) =
    (p._1, p._2, role, p._4, p._5, p._6, p._7, p._8)

  /** Updates the player's status.
    *
    * @param status
    *   the new status.
    * @return
    *   player with the updated status.
    */
  def withStatus(status: Status) =
    (p._1, p._2, p._3, status, p._5, p._6, p._7, p._8)

  /** Updates the player's hand.
    *
    * @param hand
    *   the new hand value.
    * @return
    *   player with the updated hand value.
    */
  def withOptionHand(hand: Option[PlayerHand]) =
    (p._1, p._2, p._3, p._4, hand, p._6, p._7, p._8)

  /** Updates the player's bet amount.
    *
    * @param betAmount
    *   the new bet amount.
    * @return
    *   player with the updated bet amount.
    */
  def withBetAmount(betAmount: BetAmount) =
    (p._1, p._2, p._3, p._4, p._5, betAmount, p._7, p._8)

  /** Updates whether the player has talked.
    *
    * @param hasTalked
    *   a boolean indicating if the player has talked.
    * @return
    *   player with the updated hasTalked value.
    */
  def withHasTalked(hasTalked: Boolean) =
    (p._1, p._2, p._3, p._4, p._5, p._6, hasTalked, p._8)

  /** Updates the player's pot contribution.
    *
    * @param moneyBeforeRound
    *   the new pot contribution value.
    * @return
    *   player with the updated pot contribution.
    */
  def withPotContribution(moneyBeforeRound: Money) =
    (p._1, p._2, p._3, p._4, p._5, p._6, p._7, moneyBeforeRound)

  /** Modifies the player's money.
    *
    * @param moneyToAddOrSub
    *   the amount (to add or subtract).
    * @return
    *   player with the updated money value.
    */
  def updateMoney(moneyToAddOrSub: Money) =
    p.withMoney(p._2 + moneyToAddOrSub)

  /** Modifies the player's bet amount.
    *
    * @param betAmountToAddOrSub
    *   the bet amount (to add or subtract).
    * @return
    *   player with the updated bet amount.
    */
  def updateBetAmount(betAmountToAddOrSub: BetAmount) =
    p.withBetAmount(p._6 + betAmountToAddOrSub)

  /** Modifies the player's pot contribution.
    *
    * @param potToAddOrSub
    *   the pot contribution amount (to add or subtract).
    * @return
    *   player with the updated pot contribution.
    */
  def updatePotContribution(potToAddOrSub: potContribution) =
    p.withPotContribution(p.getPotContribution() + potToAddOrSub)


  /** Retrieves the player's user ID.
    *
    * @return
    *   the player's user ID.
    */
  def getUserId() =
    p._1

  /** Retrieves the player's money.
    *
    * @return
    *   the player's money value.
    */
  def getMoney() =
    p._2

  /** Retrieves the player's role.
    *
    * @return
    *   the player's role.
    */
  def getRole() =
    p._3

  /** Retrieves the player's bet amount.
    *
    * @return
    *   the player's bet amount.
    */
  def getBetAmount() =
    p._6

  /** Retrieves the player's pot contribution.
    *
    * @return
    *   the player's pot contribution value.
    */
  def getPotContribution() =
    p._8

  /** Retrieves the player's hand.
    *
    * @return
    *   the player's hand value.
    */
  def getHand() =
    p._5

  /** Retrieves the player's status.
    *
    * @return
    *   the player's status.
    */
  def getStatus() =
    p._4

  /** Checks if the player has talked.
    *
    * @return
    *   true if the player has talked, false otherwise.
    */
  def hasTalked() =
    p._7

  /** Checks if the player is playing or all-in.
    *
    * @return
    *   true if the player is playing or all-in, false otherwise.
    */
  def isPlaying() =
    p.getStatus() == Status.Playing || p.getStatus() == Status.AllIn

  /** Checks if the player is only all-in.
    *
    * @return
    *   true if the player is all-in, false otherwise.
    */
  def isOnlyAllIn() =
    p.getStatus() == Status.AllIn

  /** Checks if the player is only playing (not all-in).
    *
    * @return
    *   true if the player is playing, false otherwise.
    */
  def isOnlyPlaying() =
    p.getStatus() == Status.Playing

  /** Checks if the player is the dealer.
    *
    * @return
    *   true if the player is the dealer, false otherwise.
    */
  def isDealer() =
    p.getRole() == Role.Dealer

  /** Checks if the player is the small blind.
    *
    * @return
    *   true if the player is the small blind, false otherwise.
    */
  def isSmallBlind() =
    p.getRole() == Role.SmallBlind

  /** Checks if the player is the big blind.
    *
    * @return
    *   true if the player is the big blind, false otherwise.
    */
  def isBigBlind() =
    p.getRole() == Role.BigBlind

  /** Checks if the player has a normal role.
    *
    * @return
    *   true if the player has a normal role, false otherwise.
    */
  def isNormal() =
    p.getRole() == Role.Normal
